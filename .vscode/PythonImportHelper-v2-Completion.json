[
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "stripe.error",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe.error",
        "description": "stripe.error",
        "detail": "stripe.error",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ARRAY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Hash",
        "kind": 6,
        "importPath": "backend.api.helper.hashing",
        "description": "backend.api.helper.hashing",
        "peekOfCode": "class Hash():\n    def hashPassword(password: str):\n        return pwd_context.hash(password)\n    def verifyPassword(plainPassword: str, hashedPassword: str):\n        return pwd_context.verify(plainPassword, hashedPassword)",
        "detail": "backend.api.helper.hashing",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.api.helper.hashing",
        "description": "backend.api.helper.hashing",
        "peekOfCode": "pwd_context = CryptContext(schemes=['bcrypt'], deprecated = 'auto')\nclass Hash():\n    def hashPassword(password: str):\n        return pwd_context.hash(password)\n    def verifyPassword(plainPassword: str, hashedPassword: str):\n        return pwd_context.verify(plainPassword, hashedPassword)",
        "detail": "backend.api.helper.hashing",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "backend.api.helper.oAuth2",
        "description": "backend.api.helper.oAuth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oath2_scheme)):\n            credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,detail=\"Could not validate credentials\",headers={\"WWW-Authenticate\": \"Bearer\"})\n            return verify_token(token, credentials_exception)",
        "detail": "backend.api.helper.oAuth2",
        "documentation": {}
    },
    {
        "label": "oath2_scheme",
        "kind": 5,
        "importPath": "backend.api.helper.oAuth2",
        "description": "backend.api.helper.oAuth2",
        "peekOfCode": "oath2_scheme = OAuth2PasswordBearer(tokenUrl='auth/login')\ndef get_current_user(token: str = Depends(oath2_scheme)):\n            credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,detail=\"Could not validate credentials\",headers={\"WWW-Authenticate\": \"Bearer\"})\n            return verify_token(token, credentials_exception)",
        "detail": "backend.api.helper.oAuth2",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "backend.api.helper.payment",
        "description": "backend.api.helper.payment",
        "peekOfCode": "stripe.api_key = 'sk_test_51PGO3vSCau3H3EDAuaVtzo73FEiKVKXw9A9QV57jAD2V6a7LBKjKgfvcfCeP61Gxa2UHgJEZu5yRQN9sYNbwIj6000t1NruG85'\nasync def payment_generation():\n    try:\n        payment_link = stripe.PaymentLink.create(\n            line_items=[{\"price\": \"price_1PGiOcSCau3H3EDApxHLAXz8\", \"quantity\": 1 }]\n        )\n        print('payment link', payment_link.url)\n        return payment_link.url\n    except stripe.error.CardError as e:\n        # Handle specific Stripe errors",
        "detail": "backend.api.helper.payment",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "backend.api.helper.token",
        "description": "backend.api.helper.token",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(token: str, credentials_exception):\n            try:\n                payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n                email: str = payload.get(\"sub\")",
        "detail": "backend.api.helper.token",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "backend.api.helper.token",
        "description": "backend.api.helper.token",
        "peekOfCode": "def verify_token(token: str, credentials_exception):\n            try:\n                payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n                email: str = payload.get(\"sub\")\n                if email is None:\n                    raise credentials_exception\n                token_scopes = payload.get(\"scopes\", [])\n                token_data = authSchemas.TokenData(scopes=token_scopes, username=email)\n            except (JWTError, ValidationError):\n                raise credentials_exception",
        "detail": "backend.api.helper.token",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.api.helper.token",
        "description": "backend.api.helper.token",
        "peekOfCode": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 400\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(token: str, credentials_exception):",
        "detail": "backend.api.helper.token",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "backend.api.helper.token",
        "description": "backend.api.helper.token",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 400\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(token: str, credentials_exception):\n            try:",
        "detail": "backend.api.helper.token",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "backend.api.helper.token",
        "description": "backend.api.helper.token",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 400\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(token: str, credentials_exception):\n            try:\n                payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "backend.api.helper.token",
        "documentation": {}
    },
    {
        "label": "createAppointment",
        "kind": 2,
        "importPath": "backend.api.repository.appointment",
        "description": "backend.api.repository.appointment",
        "peekOfCode": "def createAppointment(req, db: Session):\n    new_appointment = models.Appointment(\n        appointment_date = req.appointment_date,\n        appointment_time = req.appointment_time,\n        appointment_doctor = req.appointment_doctor,\n        patient_id = req.patient_id\n        )\n    db.add(new_appointment)\n    db.commit()\n    db.refresh(new_appointment)",
        "detail": "backend.api.repository.appointment",
        "documentation": {}
    },
    {
        "label": "login_User",
        "kind": 2,
        "importPath": "backend.api.repository.auth",
        "description": "backend.api.repository.auth",
        "peekOfCode": "def login_User(req, db: Session):\n    user = db.query(models.User).filter(models.User.email == req.username).first()\n    if not user: \n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f'Invalid Credentials'\n            )\n    if not hashing.Hash.verifyPassword(req.password, user.password):\n        raise HTTPException(\n            status_code=401,",
        "detail": "backend.api.repository.auth",
        "documentation": {}
    },
    {
        "label": "create_patient",
        "kind": 2,
        "importPath": "backend.api.repository.patient",
        "description": "backend.api.repository.patient",
        "peekOfCode": "def create_patient(req, db: Session):\n    if db.query(models.Patient).filter(models.Patient.email == req.email).first():\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f'Patient with this mail id already exist!'\n                            )\n    new_patient = models.Patient(name = req.name, email = req.email, phone_no = req.phone_no)\n    db.add(new_patient)\n    db.commit()\n    db.refresh(new_patient)",
        "detail": "backend.api.repository.patient",
        "documentation": {}
    },
    {
        "label": "show_all_patients",
        "kind": 2,
        "importPath": "backend.api.repository.patient",
        "description": "backend.api.repository.patient",
        "peekOfCode": "def show_all_patients(db: Session):\n    allBlogs = db.query(models.Patient).all()\n    return allBlogs\n# patient details page\ndef patient_details(id, db: Session):\n    patient = db.query(models.Patient).filter(models.Patient.id == id).first()\n    if not patient: \n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, \n            detail=f'patient with Id: {id} not found!'",
        "detail": "backend.api.repository.patient",
        "documentation": {}
    },
    {
        "label": "patient_details",
        "kind": 2,
        "importPath": "backend.api.repository.patient",
        "description": "backend.api.repository.patient",
        "peekOfCode": "def patient_details(id, db: Session):\n    patient = db.query(models.Patient).filter(models.Patient.id == id).first()\n    if not patient: \n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, \n            detail=f'patient with Id: {id} not found!'\n            )\n    return patient",
        "detail": "backend.api.repository.patient",
        "documentation": {}
    },
    {
        "label": "getAllUser",
        "kind": 2,
        "importPath": "backend.api.repository.user",
        "description": "backend.api.repository.user",
        "peekOfCode": "def getAllUser(db: Session):\n    allUsers = db.query(models.User).all()\n    return allUsers\ndef createUser(req, db: Session):\n    # check if user with email id exist or not\n    if db.query(models.User).filter(models.User.email == req.email).first():\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"User with email {req.email} already exists!\"\n        )",
        "detail": "backend.api.repository.user",
        "documentation": {}
    },
    {
        "label": "createUser",
        "kind": 2,
        "importPath": "backend.api.repository.user",
        "description": "backend.api.repository.user",
        "peekOfCode": "def createUser(req, db: Session):\n    # check if user with email id exist or not\n    if db.query(models.User).filter(models.User.email == req.email).first():\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"User with email {req.email} already exists!\"\n        )\n    # create a new user instance\n    new_user = models.User(\n        name = req.name,",
        "detail": "backend.api.repository.user",
        "documentation": {}
    },
    {
        "label": "allDashBoard",
        "kind": 2,
        "importPath": "backend.api.repository.user",
        "description": "backend.api.repository.user",
        "peekOfCode": "def allDashBoard(db: Session):    \n    allPatient = db.query(models.Patient).all()\n    allAppointemnt = db.query(models.Appointment).all()\n    patientCount = len(allPatient)\n    appointmentCount = len(allAppointemnt)\n    return {\"patient_count\": patientCount, \"appointment_count\": appointmentCount}",
        "detail": "backend.api.repository.user",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "backend.api.routers.appointmentRoute",
        "description": "backend.api.routers.appointmentRoute",
        "peekOfCode": "def create(\n    request: appointmentSchema.Appointment,\n    db: Session = Depends(get_db),\n    current_user: userSchema.User = Depends(oAuth2.get_current_user)\n    ):\n    return appointment.createAppointment(request, db)",
        "detail": "backend.api.routers.appointmentRoute",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.routers.appointmentRoute",
        "description": "backend.api.routers.appointmentRoute",
        "peekOfCode": "router = APIRouter(\n    prefix='/appointment',\n    tags=['appointment']\n)\n@router.post('/create')\ndef create(\n    request: appointmentSchema.Appointment,\n    db: Session = Depends(get_db),\n    current_user: userSchema.User = Depends(oAuth2.get_current_user)\n    ):",
        "detail": "backend.api.routers.appointmentRoute",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.api.routers.authRoutes",
        "description": "backend.api.routers.authRoutes",
        "peekOfCode": "def login(request: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    return auth.login_User(request, db)",
        "detail": "backend.api.routers.authRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.routers.authRoutes",
        "description": "backend.api.routers.authRoutes",
        "peekOfCode": "router = APIRouter(\n    prefix='/auth',\n    tags=['authentication']\n)\n@router.post('/login')\ndef login(request: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    return auth.login_User(request, db)",
        "detail": "backend.api.routers.authRoutes",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "backend.api.routers.patientRoute",
        "description": "backend.api.routers.patientRoute",
        "peekOfCode": "def create(\n            request: patientSchema.Patient, \n            db: Session = Depends(get_db),\n            current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return patient.create_patient(request, db)\n#get all patients\n@router.get('/allPatient', response_model= List[patientSchema.showPatient])\ndef allPatient(db: Session = Depends(get_db), current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return patient.show_all_patients(db)\n# get patient info",
        "detail": "backend.api.routers.patientRoute",
        "documentation": {}
    },
    {
        "label": "allPatient",
        "kind": 2,
        "importPath": "backend.api.routers.patientRoute",
        "description": "backend.api.routers.patientRoute",
        "peekOfCode": "def allPatient(db: Session = Depends(get_db), current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return patient.show_all_patients(db)\n# get patient info\n@router.get('/{id}', response_model=patientSchema.showPatient)\ndef patientDetail(\n    id,\n    db: Session = Depends(get_db),\n    current_user: userSchema.User = Depends(oAuth2.get_current_user)\n    ):\n    return patient.patient_details(id, db)",
        "detail": "backend.api.routers.patientRoute",
        "documentation": {}
    },
    {
        "label": "patientDetail",
        "kind": 2,
        "importPath": "backend.api.routers.patientRoute",
        "description": "backend.api.routers.patientRoute",
        "peekOfCode": "def patientDetail(\n    id,\n    db: Session = Depends(get_db),\n    current_user: userSchema.User = Depends(oAuth2.get_current_user)\n    ):\n    return patient.patient_details(id, db)",
        "detail": "backend.api.routers.patientRoute",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.routers.patientRoute",
        "description": "backend.api.routers.patientRoute",
        "peekOfCode": "router = APIRouter(\n    prefix='/patient',\n    tags=['Patient Routes']\n)\n# create patient\n@router.post('/create', response_model=patientSchema.showPatient)\ndef create(\n            request: patientSchema.Patient, \n            db: Session = Depends(get_db),\n            current_user: userSchema.User = Depends(oAuth2.get_current_user)):",
        "detail": "backend.api.routers.patientRoute",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "backend.api.routers.userRoute",
        "description": "backend.api.routers.userRoute",
        "peekOfCode": "def create(request: userSchema.User, \n           db: Session = Depends(get_db), \n           current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return user.createUser(request, db)    \n# get all users\n@router.get('/alluser', response_model=List[userSchema.showUser])\ndef allUsers( \n             db: Session = Depends(get_db), \n             current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return user.getAllUser(db)",
        "detail": "backend.api.routers.userRoute",
        "documentation": {}
    },
    {
        "label": "allUsers",
        "kind": 2,
        "importPath": "backend.api.routers.userRoute",
        "description": "backend.api.routers.userRoute",
        "peekOfCode": "def allUsers( \n             db: Session = Depends(get_db), \n             current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return user.getAllUser(db)\n#all dashboard points\n@router.get('/dashboard')\ndef dashboard(db: Session = Depends(get_db),  current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return user.allDashBoard(db);",
        "detail": "backend.api.routers.userRoute",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "backend.api.routers.userRoute",
        "description": "backend.api.routers.userRoute",
        "peekOfCode": "def dashboard(db: Session = Depends(get_db),  current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return user.allDashBoard(db);",
        "detail": "backend.api.routers.userRoute",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.routers.userRoute",
        "description": "backend.api.routers.userRoute",
        "peekOfCode": "router = APIRouter(\n    prefix='/user',\n    tags=['User Endpoints']\n)\n# create user\n@router.post('/create', response_model=userSchema.showUser)\ndef create(request: userSchema.User, \n           db: Session = Depends(get_db), \n           current_user: userSchema.User = Depends(oAuth2.get_current_user)):\n    return user.createUser(request, db)    ",
        "detail": "backend.api.routers.userRoute",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "backend.api.schemas.appointmentSchema",
        "description": "backend.api.schemas.appointmentSchema",
        "peekOfCode": "class Appointment(BaseModel):\n    appointment_date: str\n    appointment_time: str\n    appointment_doctor: str\n    patient_id: int\n    class Config():\n        orm_mode = True\nclass showAppointment(BaseModel):\n    appointment_date: str\n    appointment_time: str",
        "detail": "backend.api.schemas.appointmentSchema",
        "documentation": {}
    },
    {
        "label": "showAppointment",
        "kind": 6,
        "importPath": "backend.api.schemas.appointmentSchema",
        "description": "backend.api.schemas.appointmentSchema",
        "peekOfCode": "class showAppointment(BaseModel):\n    appointment_date: str\n    appointment_time: str\n    appointment_doctor: str\n    class Config():\n        orm_mode = True",
        "detail": "backend.api.schemas.appointmentSchema",
        "documentation": {}
    },
    {
        "label": "Login",
        "kind": 6,
        "importPath": "backend.api.schemas.authSchemas",
        "description": "backend.api.schemas.authSchemas",
        "peekOfCode": "class Login(BaseModel):\n    username: str\n    password: str\n    class Config():\n        orm_mode = True\n# login response schema\n# models for tokens are \nclass Token(BaseModel):\n    access_token: str\n    token_type: str",
        "detail": "backend.api.schemas.authSchemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "backend.api.schemas.authSchemas",
        "description": "backend.api.schemas.authSchemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []",
        "detail": "backend.api.schemas.authSchemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "backend.api.schemas.authSchemas",
        "description": "backend.api.schemas.authSchemas",
        "peekOfCode": "class TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []",
        "detail": "backend.api.schemas.authSchemas",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "backend.api.schemas.patientSchema",
        "description": "backend.api.schemas.patientSchema",
        "peekOfCode": "class Patient(BaseModel):\n    name: str\n    email: str\n    phone_no: str\n    class Config():\n        orm_mode = True\n# response patient schema\nclass showPatient(BaseModel):\n    name: str\n    email: str",
        "detail": "backend.api.schemas.patientSchema",
        "documentation": {}
    },
    {
        "label": "showPatient",
        "kind": 6,
        "importPath": "backend.api.schemas.patientSchema",
        "description": "backend.api.schemas.patientSchema",
        "peekOfCode": "class showPatient(BaseModel):\n    name: str\n    email: str\n    phone_no: str\n    appointments: List[appointmentSchema.showAppointment] = []\n    class Config():\n        orm_mode = True",
        "detail": "backend.api.schemas.patientSchema",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.api.schemas.userSchema",
        "description": "backend.api.schemas.userSchema",
        "peekOfCode": "class User(BaseModel):\n    name: str\n    email: str\n    password: str\n    class Config():\n        orm_mode = True\n# user response schema\nclass showUser(BaseModel):\n    name: str\n    email: str",
        "detail": "backend.api.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "showUser",
        "kind": 6,
        "importPath": "backend.api.schemas.userSchema",
        "description": "backend.api.schemas.userSchema",
        "peekOfCode": "class showUser(BaseModel):\n    name: str\n    email: str\n    class Config():\n        orm_mode = True",
        "detail": "backend.api.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "backend.api.database",
        "description": "backend.api.database",
        "peekOfCode": "def get_db():\n    db = sessionLocal()\n    try:\n        yield db\n    finally: \n        db.close()",
        "detail": "backend.api.database",
        "documentation": {}
    },
    {
        "label": "SQL_ALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "backend.api.database",
        "description": "backend.api.database",
        "peekOfCode": "SQL_ALCHEMY_DATABASE_URL = 'sqlite:///./blog.db'\nengine = create_engine(SQL_ALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})\nsessionLocal = sessionmaker(autocommit = False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = sessionLocal()\n    try:\n        yield db\n    finally: \n        db.close()",
        "detail": "backend.api.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "backend.api.database",
        "description": "backend.api.database",
        "peekOfCode": "engine = create_engine(SQL_ALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})\nsessionLocal = sessionmaker(autocommit = False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = sessionLocal()\n    try:\n        yield db\n    finally: \n        db.close()",
        "detail": "backend.api.database",
        "documentation": {}
    },
    {
        "label": "sessionLocal",
        "kind": 5,
        "importPath": "backend.api.database",
        "description": "backend.api.database",
        "peekOfCode": "sessionLocal = sessionmaker(autocommit = False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = sessionLocal()\n    try:\n        yield db\n    finally: \n        db.close()",
        "detail": "backend.api.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "backend.api.database",
        "description": "backend.api.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = sessionLocal()\n    try:\n        yield db\n    finally: \n        db.close()",
        "detail": "backend.api.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.api.main",
        "description": "backend.api.main",
        "peekOfCode": "app = FastAPI()\nmodels.Base.metadata.create_all(bind=engine)\norigins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],",
        "detail": "backend.api.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "backend.api.main",
        "description": "backend.api.main",
        "peekOfCode": "origins = [\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "backend.api.main",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.api.models",
        "description": "backend.api.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, nullable=False)\n    email = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n# patient Model\nclass Patient(Base):\n    __tablename__ = 'patients'\n    id = Column(Integer, primary_key=True, index=True)",
        "detail": "backend.api.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "backend.api.models",
        "description": "backend.api.models",
        "peekOfCode": "class Patient(Base):\n    __tablename__ = 'patients'\n    id = Column(Integer, primary_key=True, index=True)\n    name= Column(String, nullable=False)\n    email = Column(String, nullable=False)\n    phone_no = Column(String, nullable=False)\n    appointments = relationship('Appointment', back_populates='patient')\n# appointment Model\nclass Appointment(Base):\n    __tablename__ = 'appointments'",
        "detail": "backend.api.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "backend.api.models",
        "description": "backend.api.models",
        "peekOfCode": "class Appointment(Base):\n    __tablename__ = 'appointments'\n    id = Column(Integer, primary_key=True, index=True)\n    appointment_date = Column(String, nullable=False)\n    appointment_time = Column(String, nullable=False)\n    appointment_doctor = Column(String, nullable=False)\n    patient_id = Column(Integer, ForeignKey('patients.id'))\n    patient = relationship('Patient', back_populates='appointments')",
        "detail": "backend.api.models",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "backend.venv.Scripts.activate_this",
        "description": "backend.venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "backend.venv.Scripts.activate_this",
        "documentation": {}
    }
]